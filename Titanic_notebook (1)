{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1vWcO5pKWRSKCyuJMSDZ3rhLdxLvc2i8Z","timestamp":1740999471781}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### **Section 1 (Case study Introduction)**\n","\n","*   The sinking of the titanic is one of the most infamous shipwrecks in history\n","\n","*   The Titanic sank after colliding with an\n","iceberg. The unavailability of many lifeboats resulted in the death of as many as 1502 passengers out of 2224 passengers onboarded.\n","\n","*   The Titanic is a classic example of supervised machine learning task. Thus in this notebook, our goal is to build a predictive model that answers the question \"what people were more likely to suvive than others?\"\n","\n","*  In this notebook, we will be using the logistic regression algorithm and model provided within the Scikit-learn library to build a model that will predict those that survived and those that did not using passenger data like :name, age, gender, socio-economic class, fare etc\n","\n","*   In this notebook, we will have our codes outlined in four sections where we will extensively complete an end-to-end project on the titanic dataset."],"metadata":{"id":"0eXYETwkLQ4S"}},{"cell_type":"markdown","source":["**Section 2 - Reading the dataset and perfrming Exploratory Data Analysis on dataset**"],"metadata":{"id":"HlJVBq8d3J4c"}},{"cell_type":"code","source":["# Importing relevant libraries needed to complete our analysis\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Add more libraries if needed"],"metadata":{"id":"gem5ECpb3bZU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# uploading the dataset into your working environment\n","import google.colab\n","uploaded = google.colab.files.upload()\n","\n","# the other way you can do this is to use the upload icon provided in your colab environment to call your dataset into your environment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":71},"id":"FdZgO9x438EJ","executionInfo":{"status":"ok","timestamp":1740982768701,"user_tz":0,"elapsed":9327,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"b812de03-aab5-4c77-8f99-c2b62b82ec83"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f889fbda-41be-4145-9c46-a9ed392042ec\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f889fbda-41be-4145-9c46-a9ed392042ec\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving train.csv to train.csv\n"]}]},{"cell_type":"code","source":["# Now we will read our data into a pandas dataframe to aid in easy analysis\n","tdata = pd.read_csv('train.csv')\n","tdata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YP69umOV5KHA","executionInfo":{"status":"ok","timestamp":1740985993699,"user_tz":0,"elapsed":91,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"129dcab5-6ead-4f32-e699-07255f9e2a61"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  "],"text/html":["\n","  <div id=\"df-37b056a8-b3ad-4b4c-a7bc-7daa70952a58\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37b056a8-b3ad-4b4c-a7bc-7daa70952a58')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-37b056a8-b3ad-4b4c-a7bc-7daa70952a58 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-37b056a8-b3ad-4b4c-a7bc-7daa70952a58');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-31fd7973-c0ae-4529-8c91-de67ffe01598\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31fd7973-c0ae-4529-8c91-de67ffe01598')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-31fd7973-c0ae-4529-8c91-de67ffe01598 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tdata","summary":"{\n  \"name\": \"tdata\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334044,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":["# using the .info(), .describe(), and .shape function to undertand the dimension and structure of the dataset better\n","tdata.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hd9RKnBz6cpT","executionInfo":{"status":"ok","timestamp":1740982782642,"user_tz":0,"elapsed":42,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"a99ada10-72dd-4b45-a05b-fb7771a3153b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"]}]},{"cell_type":"code","source":["tdata.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D-afVjVy6xiQ","executionInfo":{"status":"ok","timestamp":1740986000613,"user_tz":0,"elapsed":7,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"b29e100c-512d-4d57-c4d2-5e0526225661"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891, 12)"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","source":["tdata.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"Zoi2hi5V613H","executionInfo":{"status":"ok","timestamp":1740982789727,"user_tz":0,"elapsed":108,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"fac0493d-f635-4540-c070-baaf1b73fd70"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       PassengerId    Survived      Pclass         Age       SibSp  \\\n","count   891.000000  891.000000  891.000000  714.000000  891.000000   \n","mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n","std     257.353842    0.486592    0.836071   14.526497    1.102743   \n","min       1.000000    0.000000    1.000000    0.420000    0.000000   \n","25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n","50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n","75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n","max     891.000000    1.000000    3.000000   80.000000    8.000000   \n","\n","            Parch        Fare  \n","count  891.000000  891.000000  \n","mean     0.381594   32.204208  \n","std      0.806057   49.693429  \n","min      0.000000    0.000000  \n","25%      0.000000    7.910400  \n","50%      0.000000   14.454200  \n","75%      0.000000   31.000000  \n","max      6.000000  512.329200  "],"text/html":["\n","  <div id=\"df-0c762cbe-1125-4041-a8e3-0d504bfa4f54\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c762cbe-1125-4041-a8e3-0d504bfa4f54')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0c762cbe-1125-4041-a8e3-0d504bfa4f54 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0c762cbe-1125-4041-a8e3-0d504bfa4f54');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5b062274-983d-46f2-89e5-de57f42eddcd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b062274-983d-46f2-89e5-de57f42eddcd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5b062274-983d-46f2-89e5-de57f42eddcd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"tdata\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429856,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079693,\n        \"min\": 0.8360712409770513,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228577,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["len(tdata)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jgef7bdP66uD","executionInfo":{"status":"ok","timestamp":1740964464393,"user_tz":0,"elapsed":18,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"fbed1504-d55b-483e-a85f-b0e6de797abe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["891"]},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["# checking our dataset for any missing values\n","tdata.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"a56tnHWL70ZN","executionInfo":{"status":"ok","timestamp":1740986006930,"user_tz":0,"elapsed":4,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"bcac52c1-df49-45b7-c595-593ade24e982"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PassengerId</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>177</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ticket</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Cabin</th>\n","      <td>687</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["tdata.isna().sum().reset_index(name=\"n\").plot.bar(x='index', y='n', rot=45)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":522},"id":"EOusn2mzFLuG","executionInfo":{"status":"ok","timestamp":1740986009656,"user_tz":0,"elapsed":284,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"99d5c46b-24f8-4687-edda-b084e3f83d58"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='index'>"]},"metadata":{},"execution_count":92},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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KjHEEBERkSoxxBAREZEqMcQQERGRKjHEEBERkSoxxBAREZEqMcQQERGRKjHEEBERkSoxxBAREZEqMcQQERGRKjHEEBERkSoxxBAREZEqMcQQERGRKhU6xNy6dQu9e/eGg4MDSpcuDS8vLxw7dkxZLyKYOnUqypUrh9KlS6N169a4fPmyznMkJyejV69esLa2hq2tLd555x08ePDgxfeGiIiIXhmFCjH37t1DkyZNYGpqit27d+PcuXP49NNPYWdnp2wzb948LFmyBCtXrkRsbCwsLS0RHByMzMxMZZtevXrh7Nmz2Lt3LyIiInDw4EEMGjRIf3tFRERELz2NiMh/3XjixIk4dOgQfv3116euFxG4urrigw8+wNixYwEAqampcHZ2xjfffIO33noL58+fh6enJ44ePYr69esDACIjI9G+fXvcvHkTrq6u/1qOtLQ02NjYIDU1FdbW1v+1+EREREWu4sSden2+63ND9Pp8hqTv43ehamK2b9+O+vXro2vXrnBycoKvry++/PJLZf21a9eQkJCA1q1bK8tsbGzQqFEjxMTEAABiYmJga2urBBgAaN26NYyMjBAbG/vU183KykJaWprOjYiIiF5thQoxf/31F1asWIFq1aohKioKgwcPxogRI7B27VoAQEJCAgDA2dlZ53HOzs7KuoSEBDg5OemsNzExgb29vbLN4+bMmQMbGxvl5ubmVphiExER0UuoUCEmPz8f9erVw+zZs+Hr64tBgwZh4MCBWLlyZVGVDwAQFhaG1NRU5RYfH1+kr0dEREQlX6FCTLly5eDp6amzrFatWoiLiwMAuLi4AAASExN1tklMTFTWubi4ICkpSWd9bm4ukpOTlW0eZ25uDmtra50bERERvdoKFWKaNGmCixcv6iy7dOkSPDw8AACVKlWCi4sLoqOjlfVpaWmIjY1FQEAAACAgIAApKSk4fvy4ss2+ffuQn5+PRo0aPfeOEBER0avFpDAbjx49Go0bN8bs2bPRrVs3/P7771i1ahVWrVoFANBoNBg1ahRmzpyJatWqoVKlSvjwww/h6uqKTp06AXhUc9O2bVulGSonJwfDhg3DW2+99Z9GJhEREREBhQwxDRo0wLZt2xAWFoYZM2agUqVKWLRoEXr16qVsM378eKSnp2PQoEFISUlB06ZNERkZiVKlSinbrF+/HsOGDUOrVq1gZGSE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RESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoMMURERKRKDDFERESkSgwxREREpEoGDTHLli1DxYoVUapUKTRq1Ai///67IYtDREREKmKwELNx40aMGTMG06ZNw4kTJ1C3bl0EBwcjKSnJUEUiIiIiFTFYiPnss88wcOBA9O/fH56enli5ciUsLCzw9ddfG6pIREREpCImhnjR7OxsHD9+HGFhYcoyIyMjtG7dGjExMYYoEhER0Suj4sSden/O63ND9P6c/8YgIebvv/9GXl4enJ2ddZY7OzvjwoULT2yflZWFrKws5X5qaioAIC0trWgLSvQKy8/K0Ptz8jtLrwJ9f3eK4ntjqO+3dhsR0ctrGiTEFNacOXPw0UcfPbHczc3NAKUhoudls8jQJSBSH7V8bwpTzvv378PGxuaFX9MgIaZs2bIwNjZGYmKizvLExES4uLg8sX1YWBjGjBmj3M/Pz0dycjIcHByg0Wj0Uqa0tDS4ubkhPj4e1tbWenlOfWMZ9UcN5WQZ9UcN5WQZ9UcN5XxVyygiuH//PlxdXfXyfAYJMWZmZvDz80N0dDQ6deoE4FEwiY6OxrBhw57Y3tzcHObm5jrLbG1ti6Rs1tbWJfYDpcUy6o8aysky6o8aysky6o8ayvkqllEfNTBaBmtOGjNmDPr164f69eujYcOGWLRoEdLT09G/f39DFYmIiIhUxGAhpnv37rh79y6mTp2KhIQE+Pj4IDIy8onOvkRERERPY9COvcOGDXtq85EhmJubY9q0aU80W5UkLKP+qKGcLKP+qKGcLKP+qKGcLKN+aERf45yIiIiIihEvAElERESqxBBDREREqsQQQ0RERKrEEPMKyc3NNXQRiOgVISJ6m1qe6FkYYoqRIb/Qa9euxXvvvYf09HSDlYGIXl75+fkA/neypNFo8NdffxmySPQKYIgpBps3b0ZycjI0Go1Bgkx+fj4uXLiAU6dO4cMPPyyRQYZnbP9O+x7l5eUZ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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["From the above code and graph output, we have 3 columns with null/missing values in them thus the \"**Age**\", \"**Cabin**\" and \"**Embarked**\" column have missing values present in them. We will take a critical look at these columns and work on how best we will move on with our dataset following our analysis on these columns."],"metadata":{"id":"bkaO2LDQB39L"}},{"cell_type":"markdown","source":["**Section 3 - Removing unwanted columns, filling missing values and encoding categorical variables in our dataset**\n"],"metadata":{"id":"0o3RnBOQDB5R"}},{"cell_type":"code","source":["# Let us take these 3 columns one step at a time\n","# Filling in missing values for the \"Age\" column\n","# Lets find the median distribution of each passenger class and then fill those values in with the corresponding classes these missing values fall in\n","tdata.groupby('Pclass', as_index=False)['Age'].median()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":144},"id":"5BI5_NejEH0R","executionInfo":{"status":"ok","timestamp":1740986017022,"user_tz":0,"elapsed":32,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"c44414fc-34cd-42a9-e2d1-1705e72d3e55"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Pclass   Age\n","0       1  37.0\n","1       2  29.0\n","2       3  24.0"],"text/html":["\n","  <div id=\"df-16a95ae4-28f0-48f1-83da-f4938223f02a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>37.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>29.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>24.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16a95ae4-28f0-48f1-83da-f4938223f02a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-16a95ae4-28f0-48f1-83da-f4938223f02a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-16a95ae4-28f0-48f1-83da-f4938223f02a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a144f2ff-eb94-47d7-9535-cf3a0b3db155\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a144f2ff-eb94-47d7-9535-cf3a0b3db155')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a144f2ff-eb94-47d7-9535-cf3a0b3db155 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"tdata\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.557438524302,\n        \"min\": 24.0,\n        \"max\": 37.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          37.0,\n          29.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["# Filling the missing values with the above code output for each Passenger class category\n","tdata.loc[(tdata.Age.isna()) & ((tdata.Pclass == 1)), \"Age\"] = 37.0\n","tdata.loc[(tdata.Age.isna()) & ((tdata.Pclass == 2)), \"Age\"] = 29.0\n","tdata.loc[(tdata.Age.isna()) & ((tdata.Pclass == 3)), \"Age\"] = 24.0"],"metadata":{"id":"R-ZcM_txG7Sw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tdata.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"rnYenNaKHgfN","executionInfo":{"status":"ok","timestamp":1740986021390,"user_tz":0,"elapsed":31,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"41f3fc61-84de-4db5-8ee0-bbf7f5b1b321"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age              0\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PassengerId</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ticket</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Cabin</th>\n","      <td>687</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["tdata.isna().sum().reset_index(name=\"n\").plot.bar(x='index', y='n', rot=45)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":522},"id":"yhXS2ZUsHnK1","executionInfo":{"status":"ok","timestamp":1740986028676,"user_tz":0,"elapsed":337,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"2fac8f2b-b1eb-4a14-91e9-c10762a7f09f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='index'>"]},"metadata":{},"execution_count":96},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# What do we do to the \"Cabin\" column as it has an enormous number of missing values?\n","# We decide to take it out to make our data more presentable and more qulity as such inconsistencies would introduce bias and misrepresntation in our data\n","del tdata[\"Cabin\"]"],"metadata":{"id":"ZGIHPDmWHuEL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tdata.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"Vjd-bkZyIVDy","executionInfo":{"status":"ok","timestamp":1740982823898,"user_tz":0,"elapsed":34,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"8978ec97-d69e-430a-add8-6190fd00fd79"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId    0\n","Survived       0\n","Pclass         0\n","Name           0\n","Sex            0\n","Age            0\n","SibSp          0\n","Parch          0\n","Ticket         0\n","Fare           0\n","Embarked       2\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PassengerId</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ticket</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Now our Cabin column is out and we have one more column containing missing values which is the \"Embarked\" column\n","# Let us find the most occuring element in the \"Embarked\" column and fill in the missing values with that element\n","\n","mode_tdata = tdata['Embarked'].mode() # one way of doing it\n","tdata['Embarked'].fillna(mode_tdata, inplace=True)"],"metadata":{"id":"0QP2eKG2IcmG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mode_tdata"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":116},"id":"CKlmJfFMMQRs","executionInfo":{"status":"ok","timestamp":1740986170683,"user_tz":0,"elapsed":12,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"448e491d-339e-4dd6-eede-fa974c9185cc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    S\n","Name: Embarked, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["# Another way of doing it\n","tdata['Embarked'].fillna(tdata['Embarked'].mode()[0], inplace=True)"],"metadata":{"id":"Ko8g-byarUvh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tdata.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"v5mwE3rhNuZv","executionInfo":{"status":"ok","timestamp":1740986204680,"user_tz":0,"elapsed":33,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"58ed69a5-5afd-4f49-ef8a-d0ab59b12bde"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId    0\n","Survived       0\n","Pclass         0\n","Name           0\n","Sex            0\n","Age            0\n","SibSp          0\n","Parch          0\n","Ticket         0\n","Fare           0\n","Embarked       0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PassengerId</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ticket</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","source":["# Now let us remove the unwanted columns in the dataset\n","del tdata[\"Name\"]\n","del tdata[\"Ticket\"]\n","\n","# Note we already removed the \"Cabin\" column"],"metadata":{"id":"IwONOsFYN6_L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tdata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"4xKUQeMROIFO","executionInfo":{"status":"ok","timestamp":1740986222326,"user_tz":0,"elapsed":83,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"27439b18-c4c0-426e-8343-5b189b22e7e9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","0            1         0       3    male  22.0      1      0   7.2500        S\n","1            2         1       1  female  38.0      1      0  71.2833        C\n","2            3         1       3  female  26.0      0      0   7.9250        S\n","3            4         1       1  female  35.0      1      0  53.1000        S\n","4            5         0       3    male  35.0      0      0   8.0500        S"],"text/html":["\n","  <div id=\"df-0149fbbc-6cb6-4581-aaf5-43816a0f19e0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0149fbbc-6cb6-4581-aaf5-43816a0f19e0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0149fbbc-6cb6-4581-aaf5-43816a0f19e0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0149fbbc-6cb6-4581-aaf5-43816a0f19e0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2c43842b-3bb4-4071-8ba9-a75087161b8f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c43842b-3bb4-4071-8ba9-a75087161b8f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2c43842b-3bb4-4071-8ba9-a75087161b8f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tdata","summary":"{\n  \"name\": \"tdata\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.244531842087222,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["tdata.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"Ja7M7SH3nANM","executionInfo":{"status":"ok","timestamp":1740986225391,"user_tz":0,"elapsed":9,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"0ee490b2-0b14-44f3-d000-ffd004715fe8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId    0\n","Survived       0\n","Pclass         0\n","Sex            0\n","Age            0\n","SibSp          0\n","Parch          0\n","Fare           0\n","Embarked       0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PassengerId</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["# Before encoding categorical variables in our dataset, let us make some interesting visualizations to understand the gender demographics in our dataset\n","male_distri = tdata[tdata.Sex =='male']\n","female_distri = tdata[tdata.Sex == 'female']"],"metadata":{"id":"p8FbkB4mOTNq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["male_distri.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"vjuRM1W_PxgY","executionInfo":{"status":"ok","timestamp":1740986234426,"user_tz":0,"elapsed":3,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"a48e4c4f-e9c5-49f4-8bb6-c44364facc53"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived  Pclass   Sex   Age  SibSp  Parch     Fare Embarked\n","0            1         0       3  male  22.0      1      0   7.2500        S\n","4            5         0       3  male  35.0      0      0   8.0500        S\n","5            6         0       3  male  24.0      0      0   8.4583        Q\n","6            7         0       1  male  54.0      0      0  51.8625        S\n","7            8         0       3  male   2.0      3      1  21.0750        S"],"text/html":["\n","  <div id=\"df-83a129d9-37d7-4387-bfa0-7a05a43c2542\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>24.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.4583</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>male</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>51.8625</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>2.0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>21.0750</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83a129d9-37d7-4387-bfa0-7a05a43c2542')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-83a129d9-37d7-4387-bfa0-7a05a43c2542 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-83a129d9-37d7-4387-bfa0-7a05a43c2542');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-686b3e13-8607-4faa-8d05-8f2f15a5f1c7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-686b3e13-8607-4faa-8d05-8f2f15a5f1c7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-686b3e13-8607-4faa-8d05-8f2f15a5f1c7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"male_distri","summary":"{\n  \"name\": \"male_distri\",\n  \"rows\": 577,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 577,\n        \"samples\": [\n          182,\n          625,\n          795\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.309102321273844,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 82,\n        \"samples\": [\n          23.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.13826262335667,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 193,\n        \"samples\": [\n          7.925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":112}]},{"cell_type":"code","source":["female_distri.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"LoSLqAR4P-zG","executionInfo":{"status":"ok","timestamp":1740986236492,"user_tz":0,"elapsed":48,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"12d0f248-ab2a-43f4-c1b0-f75e90750afa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","1            2         1       1  female  38.0      1      0  71.2833        C\n","2            3         1       3  female  26.0      0      0   7.9250        S\n","3            4         1       1  female  35.0      1      0  53.1000        S\n","8            9         1       3  female  27.0      0      2  11.1333        S\n","9           10         1       2  female  14.0      1      0  30.0708        C"],"text/html":["\n","  <div id=\"df-efad0aeb-f10e-4942-93a6-77b752d21538\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>11.1333</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>female</td>\n","      <td>14.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>30.0708</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efad0aeb-f10e-4942-93a6-77b752d21538')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-efad0aeb-f10e-4942-93a6-77b752d21538 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-efad0aeb-f10e-4942-93a6-77b752d21538');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-72fbaba4-16c5-4de1-9099-3c3baba4ac81\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72fbaba4-16c5-4de1-9099-3c3baba4ac81')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-72fbaba4-16c5-4de1-9099-3c3baba4ac81 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"female_distri","summary":"{\n  \"name\": \"female_distri\",\n  \"rows\": 314,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 256,\n        \"min\": 2,\n        \"max\": 889,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          357,\n          80,\n          597\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.029018143779222,\n        \"min\": 0.75,\n        \"max\": 63.0,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          62.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57.99769762308599,\n        \"min\": 6.75,\n        \"max\": 512.3292,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          7.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["# lets a create a pie chart to visualize the percentage of males surviving and that of females surviving as well\n","# Note that, computing the percentage of each shape will provide us with the count\n","male_survivors = male_distri[male_distri.Survived ==1].shape[0]/tdata.shape[0]"],"metadata":{"id":"9jb3rcWPQO2s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["male_survivors"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZmMlpRxDSOgX","executionInfo":{"status":"ok","timestamp":1740986248455,"user_tz":0,"elapsed":26,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"eb5bdb8e-5f21-4b47-e163-8fd8a385e5a1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.122334455667789"]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["male_non_survivors = male_distri[male_distri.Survived == 0].shape[0]/tdata.shape[0]"],"metadata":{"id":"OHBbJtJoSeLr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["male_non_survivors"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pFnA56iNSprn","executionInfo":{"status":"ok","timestamp":1740986251706,"user_tz":0,"elapsed":31,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"5aa4bfa0-6d3f-45e3-938c-68862a636e3c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5252525252525253"]},"metadata":{},"execution_count":117}]},{"cell_type":"code","source":["female_survivors = female_distri[female_distri.Survived == 1].shape[0]/tdata.shape[0]"],"metadata":{"id":"CrVg6dgDSwpI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["female_survivors"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uCuKFcF8TH0z","executionInfo":{"status":"ok","timestamp":1740986254679,"user_tz":0,"elapsed":6,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"a02a6945-45f1-4b7c-a72d-a5707a39954e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.2615039281705948"]},"metadata":{},"execution_count":119}]},{"cell_type":"code","source":["female_non_survivors = female_distri[female_distri.Survived == 0].shape[0]/tdata.shape[0]"],"metadata":{"id":"HjEsZqlFTKUb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["female_non_survivors"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T9BlW8cqT4OJ","executionInfo":{"status":"ok","timestamp":1740986264611,"user_tz":0,"elapsed":96,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"32e9f440-9e03-46e2-d2a6-94170f6d4628"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.09090909090909091"]},"metadata":{},"execution_count":121}]},{"cell_type":"code","source":["# Drawing the pie chart from our calculations\n","labels = 'male_survivors', 'male_non_survivors', 'female_survivors','female_non_survivors'\n","sizes = [male_survivors, male_non_survivors, female_survivors, female_non_survivors]\n","plt.pie(sizes, labels=labels, autopct='%1.1f%%')\n","plt.title(\"Passenger Survivability by Gender\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"igPfklvyUJ4s","executionInfo":{"status":"ok","timestamp":1740986269814,"user_tz":0,"elapsed":159,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"17829bd7-20b4-48d3-d8df-9081cc990231"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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87X3/Ovkxo0bwrvvvitYW1sLdnZ2wqhRo4SMjAyNNl9l6QBBEIRTp04JDRo0EMzMzAo8n7i4OEEmkwlVqlQp8DMoSHFyP7dw4UIBgDBv3jyd3+e5HTt2CB07dhScnJwEExMTwdbWVmjSpInwxRdfCCkpKfn23759u9CkSRPB0tJSsLS0FKpVqyaMHDlSuHXrlnqf5s2bF7hUR0Gf4d27d4UuXboIFhYWgqOjozB27Fhh7969+T5/QRCEixcvCj169FB/H3t5eQnBwcHCoUOH1Ps8//y0LSVCpC8kgsBVwsg4qVQqODk5oUePHgUOu5HhePToEdzc3DB9+nRMmzat1N5n8eLF6kVPX75Kk4j0F+cskVHIzMzMN79j/fr1SEpK0subr1LxrF27FkqlsshL+V+HIAj44Ycf0Lx5cxZKRAaGc5bIKPz9998YP348evXqBQcHB1y4cAE//PADatasiV69eokdj0rJ4cOHcePGDcydOxfdunV77SvvCpKWlobffvsNR44cwdWrV7Fr164Sfw8iEheH4cgoREdHY8yYMfjnn3+QlJQEe3t7dOzYEQsWLNC4iS0ZlhYtWuDUqVNo3LgxNmzYoNO94IorOjoaPj4+sLW1xYgRIzB37twSfw8iEheLJSIiIiItOGeJiIiISAsWS0RERERasFgiIiIi0oLFEhEREZEWLJaIiIiItGCxRERERKQFiyUiIiIiLVgsEREREWnBYomIiIhICxZLRERERFqwWCIiIiLSgsUSERERkRYsloiIiIi0YLFEREREpAWLJSIiIiItWCwRERERacFiiYiIiEgLFktEREREWrBYIiIiItKCxRIRERGRFiyWiIiIiLRgsURERESkBYslIiIiIi1YLBERERFpwWKJiIiISAsWS0RERERasFgiIiIi0oLFEhEREZEWLJaIiIiItGCxRERERKQFiyUiIiIiLVgsEREREWnBYomIiIhICxZLRERERFqwWCIiIiLSgsUSERERkRYsloiIiIi0YLFEREREpAWLJSIiIiItTMQOQEQiys0GMpKA9KQX/01/DGQkAznpQG4mkJuV91ApAVVu3gMATOSAzAwwMQdMzACZPG+biRyQ2wCWjoCFI2DhAFg6AOa2gEQi6ukSEb0KFktEhiw1EUi5m/dIvgukxPz7uAs8iweyn5VdFqkJoLAHrJwB20qAnTdg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\n"},"metadata":{}}]},{"cell_type":"code","source":["labels = 'male_survivors', 'female_survivors'\n","sizes = [male_survivors, female_survivors]\n","plt.pie(sizes, labels=labels, autopct='%1.1f%%')\n","plt.title(\"Survival Percentage for all male and female survivors\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"2jbwNs82Uex7","executionInfo":{"status":"ok","timestamp":1740986281700,"user_tz":0,"elapsed":121,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"85ff1996-2fb8-4494-948b-d7235993cb2c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["labels = 'male_non_survivors', 'female_non_survivors'\n","sizes = [male_non_survivors, female_non_survivors]\n","plt.pie(sizes, labels=labels, autopct='%1.1f%%')\n","plt.title(\"Survival Percentage for all male and female non survivors\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"ezoDiURAUsBT","executionInfo":{"status":"ok","timestamp":1740986284075,"user_tz":0,"elapsed":193,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"c03ce6c9-e3a6-44e1-b3a2-c4a617e8eaa5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["What story can we derive out from this analysis?"],"metadata":{"id":"jiha4oe3WhvA"}},{"cell_type":"code","source":["# We have seen survivability  by gender, now let us delve deeper in each Passenger class and understand their survival percentage/rate as well\n","# We will do this by creating three different variables that would represent each separate class\n","class1 = tdata[tdata.Pclass == 1]\n","class2 = tdata[tdata.Pclass == 2]\n","class3 = tdata[tdata.Pclass == 3]\n","\n","# After segmenting each class into separate variab les, we find their survival rate\n","class1_survivors = class1[class1.Survived == 1]\n","class2_survivors = class2[class2.Survived == 1]\n","class3_survivors = class3[class3.Survived == 1]"],"metadata":{"id":"cSC4CaXGWl_m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now it will be easier to drawing a bar chart of passenager class and survival rate from the categorization we did in the code snippet above\n","labels = ['1', '2', '3']\n","survivors = [class1_survivors.shape[0], class2_survivors.shape[0],\n","class3_survivors.shape[0]]\n","non_survivors = [class1.shape[0]-survivors[0],\n","class2.shape[0]-survivors[1], class3.shape[0]-survivors[2]]\n","\n","\n","# create the bar graph\n","fig, ax = plt.subplots(figsize=(8,8))\n","ax.bar(labels, survivors, label='Survivors')\n","ax.bar(labels, non_survivors, bottom=survivors, label='Non-Survivors')\n","ax.set_ylabel('Passengers')\n","ax.set_xlabel('Class')\n","ax.set_title('Passenger Survivability by Class')\n","ax.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":718},"id":"xhnnJb9-Y139","executionInfo":{"status":"ok","timestamp":1740986294276,"user_tz":0,"elapsed":226,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"7860abc9-e89e-41bf-e1af-ec1ed1d5675c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["What story can you tell from the bar graph above?"],"metadata":{"id":"bSHeFB0_c5FW"}},{"cell_type":"code","source":["#Creating new One-hot encoded columns\n","dummies = []\n","cols = ['Pclass', 'Sex', 'Embarked']\n","\n","for col in cols:\n"," dummies.append(pd.get_dummies(tdata[col]))\n","\n","all_dummies = pd.concat(dummies, axis=1)\n","all_dummies"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"uaXsyXSmdCA5","executionInfo":{"status":"ok","timestamp":1740986300515,"user_tz":0,"elapsed":56,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"e260d9fa-e81e-49f9-f85e-e0316e74653b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         1      2      3  female   male      C      Q      S\n","0    False  False   True   False   True  False  False   True\n","1     True  False  False    True  False   True  False  False\n","2    False  False   True    True  False  False  False   True\n","3     True  False  False    True  False  False  False   True\n","4    False  False   True   False   True  False  False   True\n","..     ...    ...    ...     ...    ...    ...    ...    ...\n","886  False   True  False   False   True  False  False   True\n","887   True  False  False    True  False  False  False   True\n","888  False  False   True    True  False  False  False   True\n","889   True  False  False   False   True   True  False  False\n","890  False  False   True   False   True  False   True  False\n","\n","[891 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-1e61ec65-bc43-4b75-8b86-4b2b482a0415\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>female</th>\n","      <th>male</th>\n","      <th>C</th>\n","      <th>Q</th>\n","      <th>S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e61ec65-bc43-4b75-8b86-4b2b482a0415')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1e61ec65-bc43-4b75-8b86-4b2b482a0415 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1e61ec65-bc43-4b75-8b86-4b2b482a0415');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-69955819-5d3b-4e8f-a7bb-5fc465b0c6d6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69955819-5d3b-4e8f-a7bb-5fc465b0c6d6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-69955819-5d3b-4e8f-a7bb-5fc465b0c6d6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d7e06277-5175-47f1-830a-05e3308ab7a1\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('all_dummies')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d7e06277-5175-47f1-830a-05e3308ab7a1 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('all_dummies');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_dummies","summary":"{\n  \"name\": \"all_dummies\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"female\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"male\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":128}]},{"cell_type":"code","source":[" # Let us add our created dummies to our dataset and remove old columns\n","tdata = pd.concat((tdata,all_dummies), axis=1)\n","tdata = tdata.drop(['Pclass', 'Sex', 'Embarked'],axis=1)"],"metadata":{"id":"rSjiwIHad40A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tdata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"kJMn9WOLnvb_","executionInfo":{"status":"ok","timestamp":1740986310157,"user_tz":0,"elapsed":47,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"cf4ae750-ea05-4ba1-916f-3abfb7e87b4b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived   Age  SibSp  Parch     Fare      1      2      3  \\\n","0            1         0  22.0      1      0   7.2500  False  False   True   \n","1            2         1  38.0      1      0  71.2833   True  False  False   \n","2            3         1  26.0      0      0   7.9250  False  False   True   \n","3            4         1  35.0      1      0  53.1000   True  False  False   \n","4            5         0  35.0      0      0   8.0500  False  False   True   \n","\n","   female   male      C      Q      S  \n","0   False   True  False  False   True  \n","1    True  False   True  False  False  \n","2    True  False  False  False   True  \n","3    True  False  False  False   True  \n","4   False   True  False  False   True  "],"text/html":["\n","  <div id=\"df-3fecb6bc-4930-439f-9d6c-e2463cea438a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>female</th>\n","      <th>male</th>\n","      <th>C</th>\n","      <th>Q</th>\n","      <th>S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3fecb6bc-4930-439f-9d6c-e2463cea438a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3fecb6bc-4930-439f-9d6c-e2463cea438a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3fecb6bc-4930-439f-9d6c-e2463cea438a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-804c5957-7962-4e1a-97a7-69f9f2f42ab7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-804c5957-7962-4e1a-97a7-69f9f2f42ab7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-804c5957-7962-4e1a-97a7-69f9f2f42ab7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tdata","summary":"{\n  \"name\": \"tdata\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.244531842087222,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"female\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"male\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":130}]},{"cell_type":"code","source":["# let us transform our columns to strings\n","tdata.columns = tdata.columns.astype(str)"],"metadata":{"id":"kvt3jnUdn-wh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#  let us transform our colum names for better feature identification and reference\n","tdata = tdata.rename(columns={'1': 'cla1'})\n","tdata = tdata.rename(columns={'2': 'cla2'})\n","tdata = tdata.rename(columns={'3': 'cla3'})\n","\n","# renaming the sex columns\n","tdata = tdata.rename(columns={'male': 'sex_male'})\n","tdata = tdata.rename(columns={'female': 'sex_female'})\n","\n","# renaming the embarked columns\n","tdata = tdata.rename(columns={'C': 'emb_C'})\n","tdata = tdata.rename(columns={'Q': 'emb_Q'})\n","tdata = tdata.rename(columns={'S': 'emb_S'})"],"metadata":{"id":"xCXgoaqKeSbu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["What did you notice from the data after renaming the columns?"],"metadata":{"id":"5ajjatYhhUp2"}},{"cell_type":"code","source":["tdata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Z5R1hDyQhacp","executionInfo":{"status":"ok","timestamp":1740986335995,"user_tz":0,"elapsed":62,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"116f453e-1ae7-4d54-fc47-13c92f5c77ed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived   Age  SibSp  Parch     Fare   cla1   cla2   cla3  \\\n","0            1         0  22.0      1      0   7.2500  False  False   True   \n","1            2         1  38.0      1      0  71.2833   True  False  False   \n","2            3         1  26.0      0      0   7.9250  False  False   True   \n","3            4         1  35.0      1      0  53.1000   True  False  False   \n","4            5         0  35.0      0      0   8.0500  False  False   True   \n","\n","   sex_female  sex_male  emb_C  emb_Q  emb_S  \n","0       False      True  False  False   True  \n","1        True     False   True  False  False  \n","2        True     False  False  False   True  \n","3        True     False  False  False   True  \n","4       False      True  False  False   True  "],"text/html":["\n","  <div id=\"df-86f14e38-dbe7-4255-80f6-e9fc29e044bc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>cla1</th>\n","      <th>cla2</th>\n","      <th>cla3</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>emb_C</th>\n","      <th>emb_Q</th>\n","      <th>emb_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86f14e38-dbe7-4255-80f6-e9fc29e044bc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-86f14e38-dbe7-4255-80f6-e9fc29e044bc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-86f14e38-dbe7-4255-80f6-e9fc29e044bc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ad0d243d-f93c-4e29-960f-72d7a5f7cd8f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad0d243d-f93c-4e29-960f-72d7a5f7cd8f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ad0d243d-f93c-4e29-960f-72d7a5f7cd8f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tdata","summary":"{\n  \"name\": \"tdata\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.244531842087222,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla1\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla2\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla3\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_Q\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_S\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":133}]},{"cell_type":"code","source":["del tdata['PassengerId']"],"metadata":{"id":"hPsiXPma333o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# let's take a look at our columns before ma[[ing them out\n","columns = tdata.columns.tolist()"],"metadata":{"id":"dASDTyi8ohMp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WRQAnlYridUQ","executionInfo":{"status":"ok","timestamp":1740986368323,"user_tz":0,"elapsed":15,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"8f11745b-6a08-4f7c-9eb5-2521936dbc42"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Survived',\n"," 'Age',\n"," 'SibSp',\n"," 'Parch',\n"," 'Fare',\n"," 'cla1',\n"," 'cla2',\n"," 'cla3',\n"," 'sex_female',\n"," 'sex_male',\n"," 'emb_C',\n"," 'emb_Q',\n"," 'emb_S']"]},"metadata":{},"execution_count":136}]},{"cell_type":"code","source":["# now let us convert the type of the boolean present in our data to be integers\n","tdata['cla1'] = tdata['cla1'].astype(int)\n","tdata['cla2'] = tdata['cla2'].astype(int)\n","tdata['cla3'] = tdata['cla3'].astype(int)\n","\n","tdata['sex_male'] = tdata['sex_male'].astype(int)\n","tdata['sex_female'] = tdata['sex_female'].astype(int)\n","\n","tdata['emb_C'] = tdata['emb_C'].astype(int)\n","tdata['emb_Q'] = tdata['emb_Q'].astype(int)\n","tdata['emb_S'] = tdata['emb_S'].astype(int)"],"metadata":{"id":"exzQf7CEo4hZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tdata.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"zzazOyLqp0PL","executionInfo":{"status":"ok","timestamp":1740986380110,"user_tz":0,"elapsed":80,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"06cac0a4-2560-40bf-969d-7edc7de0b455"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Survived   Age  SibSp  Parch     Fare  cla1  cla2  cla3  sex_female  \\\n","0         0  22.0      1      0   7.2500     0     0     1           0   \n","1         1  38.0      1      0  71.2833     1     0     0           1   \n","2         1  26.0      0      0   7.9250     0     0     1           1   \n","3         1  35.0      1      0  53.1000     1     0     0           1   \n","4         0  35.0      0      0   8.0500     0     0     1           0   \n","\n","   sex_male  emb_C  emb_Q  emb_S  \n","0         1      0      0      1  \n","1         0      1      0      0  \n","2         0      0      0      1  \n","3         0      0      0      1  \n","4         1      0      0      1  "],"text/html":["\n","  <div id=\"df-f082d4eb-345d-4c89-a26a-824dbacfcc1b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>cla1</th>\n","      <th>cla2</th>\n","      <th>cla3</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>emb_C</th>\n","      <th>emb_Q</th>\n","      <th>emb_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f082d4eb-345d-4c89-a26a-824dbacfcc1b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f082d4eb-345d-4c89-a26a-824dbacfcc1b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f082d4eb-345d-4c89-a26a-824dbacfcc1b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-46ae866e-13e3-43e8-8be0-2a6cc4ab9dc6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46ae866e-13e3-43e8-8be0-2a6cc4ab9dc6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-46ae866e-13e3-43e8-8be0-2a6cc4ab9dc6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tdata","summary":"{\n  \"name\": \"tdata\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.244531842087222,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":138}]},{"cell_type":"code","source":["len(tdata)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C8Bwa7hirYM-","executionInfo":{"status":"ok","timestamp":1740986390435,"user_tz":0,"elapsed":15,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"3a0c2c20-b890-4dce-ab0a-36e3729d6e57"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["891"]},"metadata":{},"execution_count":139}]},{"cell_type":"markdown","source":["**Section 4 - Feature scaling and creating our model**"],"metadata":{"id":"HyekoEwNrzJG"}},{"cell_type":"code","source":["# Before feauture scaling, let us define our X and y variables\n","\n","# We will proceed to feature scale the \"Age\" and \"Fare\" column since we would not want to introduce any biases to our model/algorithm\n","\n","X = tdata.drop('Survived', axis=1)  # X remains a DataFrame\n","y = tdata['Survived']"],"metadata":{"id":"_ybFHJCUsFSf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0YG9WDED4jXi","executionInfo":{"status":"ok","timestamp":1740986539345,"user_tz":0,"elapsed":44,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"0d0a1dfd-a9c3-4eff-f165-6e0f42c05221"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Age  SibSp  Parch     Fare  cla1  cla2  cla3  sex_female  sex_male  emb_C  \\\n","0  22.0      1      0   7.2500     0     0     1           0         1      0   \n","1  38.0      1      0  71.2833     1     0     0           1         0      1   \n","2  26.0      0      0   7.9250     0     0     1           1         0      0   \n","3  35.0      1      0  53.1000     1     0     0           1         0      0   \n","4  35.0      0      0   8.0500     0     0     1           0         1      0   \n","\n","   emb_Q  emb_S  \n","0      0      1  \n","1      0      0  \n","2      0      1  \n","3      0      1  \n","4      0      1  "],"text/html":["\n","  <div id=\"df-72b174cd-3b89-4d59-8757-7e2ed4e7a27f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>cla1</th>\n","      <th>cla2</th>\n","      <th>cla3</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>emb_C</th>\n","      <th>emb_Q</th>\n","      <th>emb_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72b174cd-3b89-4d59-8757-7e2ed4e7a27f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-72b174cd-3b89-4d59-8757-7e2ed4e7a27f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-72b174cd-3b89-4d59-8757-7e2ed4e7a27f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ad215f15-4a99-4e46-b2ee-dc8e2cf8340f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad215f15-4a99-4e46-b2ee-dc8e2cf8340f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ad215f15-4a99-4e46-b2ee-dc8e2cf8340f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.244531842087222,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0,\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625,\n          7.725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":141}]},{"cell_type":"code","source":["y.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"kkw3txqw4owF","executionInfo":{"status":"ok","timestamp":1740986602344,"user_tz":0,"elapsed":11,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"628127ba-0128-400c-f5cc-37075b00bfe8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0\n","1    1\n","2    1\n","3    1\n","4    0\n","Name: Survived, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":145}]},{"cell_type":"code","source":["len(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XTT67Qar410C","executionInfo":{"status":"ok","timestamp":1740986611712,"user_tz":0,"elapsed":12,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"910fef2c-c31f-4d09-daf5-9b26deeb2537"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["891"]},"metadata":{},"execution_count":146}]},{"cell_type":"code","source":["len(y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RBefwauu44EB","executionInfo":{"status":"ok","timestamp":1740986619518,"user_tz":0,"elapsed":31,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"26807955-7bd1-47c6-a1dc-3d6a480f526e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["891"]},"metadata":{},"execution_count":147}]},{"cell_type":"code","source":["# let us feature scale and now introduce our algorithm to our data\n","from sklearn import preprocessing\n","X['Age'] = preprocessing.scale(X['Age'])\n","X['Fare'] = preprocessing.scale(X['Fare'])"],"metadata":{"id":"6irOCK8fyfmi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"seZT_ReGubZJ","executionInfo":{"status":"ok","timestamp":1740986775861,"user_tz":0,"elapsed":86,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"59c6194d-d15b-44ce-9539-69f8fbb4a615"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Age  SibSp  Parch      Fare  cla1  cla2  cla3  sex_female  sex_male  \\\n","0 -0.533834      1      0 -0.502445     0     0     1           0         1   \n","1  0.674891      1      0  0.786845     1     0     0           1         0   \n","2 -0.231653      0      0 -0.488854     0     0     1           1         0   \n","3  0.448255      1      0  0.420730     1     0     0           1         0   \n","4  0.448255      0      0 -0.486337     0     0     1           0         1   \n","\n","   emb_C  emb_Q  emb_S  \n","0      0      0      1  \n","1      1      0      0  \n","2      0      0      1  \n","3      0      0      1  \n","4      0      0      1  "],"text/html":["\n","  <div id=\"df-75ba2110-8156-46a7-a895-679955075d64\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>cla1</th>\n","      <th>cla2</th>\n","      <th>cla3</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>emb_C</th>\n","      <th>emb_Q</th>\n","      <th>emb_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.533834</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>-0.502445</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.674891</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.786845</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.231653</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.488854</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.448255</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.420730</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.448255</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.486337</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75ba2110-8156-46a7-a895-679955075d64')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-75ba2110-8156-46a7-a895-679955075d64 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-75ba2110-8156-46a7-a895-679955075d64');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-92978846-6ee0-4f73-94ea-9cc21343cbff\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-92978846-6ee0-4f73-94ea-9cc21343cbff')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-92978846-6ee0-4f73-94ea-9cc21343cbff button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005616400330466,\n        \"min\": -2.164100463596168,\n        \"max\": 3.8477915581970077,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          -2.1391705268382926,\n          -0.533833690156903,\n          -0.8360147417675174\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005616400330462,\n        \"min\": -0.6484216535389205,\n        \"max\": 9.667166525013505,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          -0.42207354059350805,\n          0.395813560675251,\n          -0.4928811950225652\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":149}]},{"cell_type":"markdown","source":["What observations can you draw from the \"Age\" and \"Fare\" column after feature scaling?"],"metadata":{"id":"iBuG86_c5hOf"}},{"cell_type":"code","source":["# After we have feature scaled, we will split our data\n","# Note 80/20 train/test split\n","\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"jQLliCMEuvTb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(X_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GFSe_2KAu-Lt","executionInfo":{"status":"ok","timestamp":1740986863616,"user_tz":0,"elapsed":11,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"ba1c5424-2d15-415f-8bca-2b06d0b7db88"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["712"]},"metadata":{},"execution_count":152}]},{"cell_type":"code","source":["len(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TzQvDNELvQOX","executionInfo":{"status":"ok","timestamp":1740986870024,"user_tz":0,"elapsed":35,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"945c3e7e-9f16-45ab-aeb9-b767e119b53b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["179"]},"metadata":{},"execution_count":153}]},{"cell_type":"code","source":["X_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"8p7qWvZDvt1t","executionInfo":{"status":"ok","timestamp":1740986878615,"user_tz":0,"elapsed":63,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"18f0afb5-7537-432c-ed76-b62dcf86c46a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Age  SibSp  Parch      Fare  cla1  cla2  cla3  sex_female  sex_male  \\\n","709 -0.382743      1      1 -0.341452     0     0     1           0         1   \n","439  0.146074      0      0 -0.437007     0     1     0           0         1   \n","840 -0.684924      0      0 -0.488854     0     0     1           0         1   \n","720 -1.742558      0      1  0.016023     0     1     0           1         0   \n","39  -1.138196      1      0 -0.422074     0     0     1           1         0   \n","\n","     emb_C  emb_Q  emb_S  \n","709      1      0      0  \n","439      0      0      1  \n","840      0      0      1  \n","720      0      0      1  \n","39       1      0      0  "],"text/html":["\n","  <div id=\"df-f15d7abf-cb27-4789-a09f-1912f99d91c3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>cla1</th>\n","      <th>cla2</th>\n","      <th>cla3</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>emb_C</th>\n","      <th>emb_Q</th>\n","      <th>emb_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>709</th>\n","      <td>-0.382743</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-0.341452</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>439</th>\n","      <td>0.146074</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.437007</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>840</th>\n","      <td>-0.684924</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.488854</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>-1.742558</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.016023</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>-1.138196</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>-0.422074</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f15d7abf-cb27-4789-a09f-1912f99d91c3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f15d7abf-cb27-4789-a09f-1912f99d91c3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f15d7abf-cb27-4789-a09f-1912f99d91c3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-096f565f-c57b-458f-b37a-eb515a037e72\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-096f565f-c57b-458f-b37a-eb515a037e72')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-096f565f-c57b-458f-b37a-eb515a037e72 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test","summary":"{\n  \"name\": \"X_test\",\n  \"rows\": 179,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0089424322106153,\n        \"min\": -2.1331269058060807,\n        \"max\": 3.167884192073125,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          -0.38274316435159567,\n          -0.23165263854628843,\n          0.44825472757759427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          0,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7942676124338273,\n        \"min\": -0.6484216535389205,\n        \"max\": 4.634416897040849,\n        \"num_unique_values\": 107,\n        \"samples\": [\n          0.0493298231623713,\n          -0.4863374216869257,\n          -0.42207354059350805\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cla3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emb_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":154}]},{"cell_type":"code","source":["# before introducing our algorithm, let us set aside/assign a variable to contain our X_test data where our features of interest will be  \"sex_male\", \"sex_female\" and \"Age\"\n","\n","# from the sepaeration, we will come back to our variable and develop a pie chart for the gender survivability percentage diistribution, this will be after model prediction\n","\n","X_test_viz = X_test.loc[:, ['Age', 'sex_male', 'sex_female']] # you can exclude \"Age\" from here since our main focus is the gender"],"metadata":{"id":"oYUKKPgcv4K7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test_viz"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"eHMiHqbUxOoB","executionInfo":{"status":"ok","timestamp":1740988289460,"user_tz":0,"elapsed":59,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"ebe0e5b3-1f5f-42f5-8364-988dfe9a5a4a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Age  sex_male  sex_female\n","709 -0.382743         1           0\n","439  0.146074         1           0\n","840 -0.684924         1           0\n","720 -1.742558         0           1\n","39  -1.138196         0           1\n","..        ...       ...         ...\n","433 -0.911560         1           0\n","773 -0.382743         1           0\n","25   0.674891         0           1\n","84  -0.911560         0           1\n","10  -1.893648         0           1\n","\n","[179 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-8d2d5495-6367-4887-bfbf-6e7a0c55b8db\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>sex_male</th>\n","      <th>sex_female</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>709</th>\n","      <td>-0.382743</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>439</th>\n","      <td>0.146074</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>840</th>\n","      <td>-0.684924</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>-1.742558</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>-1.138196</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>433</th>\n","      <td>-0.911560</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>773</th>\n","      <td>-0.382743</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>0.674891</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>-0.911560</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>-1.893648</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>179 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d2d5495-6367-4887-bfbf-6e7a0c55b8db')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d2d5495-6367-4887-bfbf-6e7a0c55b8db button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d2d5495-6367-4887-bfbf-6e7a0c55b8db');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d67d720a-e92f-4a6d-b16c-0e38c69b7519\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d67d720a-e92f-4a6d-b16c-0e38c69b7519')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d67d720a-e92f-4a6d-b16c-0e38c69b7519 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_6ccf72f1-2293-424f-9c4a-4d5b993b39b2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_test_viz')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_6ccf72f1-2293-424f-9c4a-4d5b993b39b2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_test_viz');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test_viz","summary":"{\n  \"name\": \"X_test_viz\",\n  \"rows\": 179,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0089424322106153,\n        \"min\": -2.1331269058060807,\n        \"max\": 3.167884192073125,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          -0.38274316435159567,\n          -0.23165263854628843,\n          0.44825472757759427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":161}]},{"cell_type":"code","source":["# Here, we will implement our logistic regression algorithim to learn on our test data\n","\n","from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","Y_pred = model.predict(X_test)"],"metadata":{"id":"-Oo2ettvvXx7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qtAghehi7P0E","executionInfo":{"status":"ok","timestamp":1740988302927,"user_tz":0,"elapsed":213,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"3c09fa00-8f13-4ddc-9983-cb04f3d8008b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,\n","       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\n","       1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1,\n","       0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n","       1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0,\n","       0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,\n","       0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0,\n","       0, 1, 1])"]},"metadata":{},"execution_count":163}]},{"cell_type":"code","source":["acc_log = round(model.score(X_test, y_test) * 100, 2)\n","acc_log"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4rLlHn0IvtcL","executionInfo":{"status":"ok","timestamp":1740988306654,"user_tz":0,"elapsed":9,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"d472b36a-8c6c-4dae-c94b-c33c7ac15408"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["80.45"]},"metadata":{},"execution_count":164}]},{"cell_type":"markdown","source":["What brief summary can you give to the 81.01% prediction given by the model on our test dataset  thus X_test?"],"metadata":{"id":"qxHO33pyvz7u"}},{"cell_type":"code","source":["# Let us compute for the correlation coefficients for the various features in our dataset\n","coeff_df = pd.DataFrame(tdata.columns.delete(0))\n","coeff_df.columns = ['Feature']\n","coeff_df[\"Correlation\"] = pd.Series(model.coef_[0])\n","\n","coeff_df.sort_values(by='Correlation', ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"id":"GB4lo233wIPS","executionInfo":{"status":"ok","timestamp":1740988318465,"user_tz":0,"elapsed":57,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"dec38c2a-f48d-482c-e048-303ee595a090"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Feature  Correlation\n","7   sex_female     1.317583\n","4         cla1     0.790498\n","5         cla2     0.231604\n","9        emb_C     0.218827\n","3         Fare     0.168830\n","10       emb_Q     0.017395\n","2        Parch    -0.128336\n","11       emb_S    -0.238331\n","1        SibSp    -0.298752\n","0          Age    -0.403231\n","6         cla3    -1.024210\n","8     sex_male    -1.319692"],"text/html":["\n","  <div id=\"df-5bfb3b9c-d5e1-4d1d-a6ca-f4cb360eb938\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature</th>\n","      <th>Correlation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>sex_female</td>\n","      <td>1.317583</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>cla1</td>\n","      <td>0.790498</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>cla2</td>\n","      <td>0.231604</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>emb_C</td>\n","      <td>0.218827</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Fare</td>\n","      <td>0.168830</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>emb_Q</td>\n","      <td>0.017395</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Parch</td>\n","      <td>-0.128336</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>emb_S</td>\n","      <td>-0.238331</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>SibSp</td>\n","      <td>-0.298752</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Age</td>\n","      <td>-0.403231</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>cla3</td>\n","      <td>-1.024210</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>sex_male</td>\n","      <td>-1.319692</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5bfb3b9c-d5e1-4d1d-a6ca-f4cb360eb938')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5bfb3b9c-d5e1-4d1d-a6ca-f4cb360eb938 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5bfb3b9c-d5e1-4d1d-a6ca-f4cb360eb938');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5ac2a185-6515-4bd1-966d-0188d70f20fc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ac2a185-6515-4bd1-966d-0188d70f20fc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5ac2a185-6515-4bd1-966d-0188d70f20fc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"coeff_df\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"cla3\",\n          \"Age\",\n          \"sex_female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Correlation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7115789876338693,\n        \"min\": -1.3196916556247438,\n        \"max\": 1.3175832257529638,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -1.024210207861053,\n          -0.40323062093223255,\n          1.3175832257529638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":165}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix\n","\n","accuracy_score(Y_pred, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RdudXKKKwxF4","executionInfo":{"status":"ok","timestamp":1740988329596,"user_tz":0,"elapsed":51,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"2978b7ed-1323-4fd0-a04c-aa80350959f6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8044692737430168"]},"metadata":{},"execution_count":166}]},{"cell_type":"code","source":["confusion_matrix(Y_pred, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5l_kqGYDCJcA","executionInfo":{"status":"ok","timestamp":1740989320023,"user_tz":0,"elapsed":62,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"6cea9f10-434c-4b7b-a2e0-0307ecaec191"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[91, 21],\n","       [14, 53]])"]},"metadata":{},"execution_count":170}]},{"cell_type":"markdown","source":["We have a 2X2 matrices where there are true positives and false positives. 91 represnts instances where the prediction was accurate and 21 represents instances where the prediction was inaccurate.\n","14 represents False negatives thus, represnting instances which were incorrectly predicted as negative when they were actually ositive thus predicted to not survive but did.\n","Then we have True negatives which is 53 thus represnting instances which were correctly predicted as negative (i.e those that did not survive)\n","In this case;\n","* 91 passengers were correctly predicted to survive.\n","* 21 passengers were incorrectly predicted to survive (they actually did not).\n","* 14 passengers were incorrectly predicted to not survive (they actually did).\n","* 53 passengers were correctly predicted to not survive."],"metadata":{"id":"sNHIhmgo__9y"}},{"cell_type":"markdown","source":["From the above confusion matrix, analyze your Y_pred and y_test and indicate the True Positives(TP), True Negatives (TN), False Positives (FP) and False Negatives as has been done on the prediction above"],"metadata":{"id":"KTA6YVRwCYMO"}},{"cell_type":"markdown","source":["Now let us create visualization for our X_test_viz we put aside"],"metadata":{"id":"6PNCdXM0xxc4"}},{"cell_type":"code","source":["X_test_viz.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"T7OMo7PpDaJZ","executionInfo":{"status":"ok","timestamp":1740989388935,"user_tz":0,"elapsed":79,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"359680b9-e406-4340-cde9-5ed2a0899203"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Age  sex_male  sex_female\n","709 -0.382743         1           0\n","439  0.146074         1           0\n","840 -0.684924         1           0\n","720 -1.742558         0           1\n","39  -1.138196         0           1"],"text/html":["\n","  <div id=\"df-f9bfdd3f-379d-42fc-9846-91327328efb3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>sex_male</th>\n","      <th>sex_female</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>709</th>\n","      <td>-0.382743</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>439</th>\n","      <td>0.146074</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>840</th>\n","      <td>-0.684924</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>-1.742558</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>-1.138196</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9bfdd3f-379d-42fc-9846-91327328efb3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f9bfdd3f-379d-42fc-9846-91327328efb3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f9bfdd3f-379d-42fc-9846-91327328efb3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a4285ede-002b-4796-98f8-381ae4094bda\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a4285ede-002b-4796-98f8-381ae4094bda')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a4285ede-002b-4796-98f8-381ae4094bda button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test_viz","summary":"{\n  \"name\": \"X_test_viz\",\n  \"rows\": 179,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0089424322106153,\n        \"min\": -2.1331269058060807,\n        \"max\": 3.167884192073125,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          -0.38274316435159567,\n          -0.23165263854628843,\n          0.44825472757759427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":171}]},{"cell_type":"code","source":["# adding our y prediction to X_test_viz to draw our pie chart\n","X_test_viz['predicted_y'] = Y_pred"],"metadata":{"id":"Vic6jJSSx0cw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test_viz.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"fE5PV6D7yLAA","executionInfo":{"status":"ok","timestamp":1740989430245,"user_tz":0,"elapsed":84,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"d7614d94-bc3a-4108-ff35-a97c9a600ad3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Age  sex_male  sex_female  predicted_y\n","709 -0.382743         1           0            0\n","439  0.146074         1           0            0\n","840 -0.684924         1           0            0\n","720 -1.742558         0           1            1\n","39  -1.138196         0           1            1"],"text/html":["\n","  <div id=\"df-e5db4af9-b5c3-46d6-9e8f-693637d5c3b7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>sex_male</th>\n","      <th>sex_female</th>\n","      <th>predicted_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>709</th>\n","      <td>-0.382743</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>439</th>\n","      <td>0.146074</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>840</th>\n","      <td>-0.684924</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>-1.742558</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>-1.138196</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5db4af9-b5c3-46d6-9e8f-693637d5c3b7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e5db4af9-b5c3-46d6-9e8f-693637d5c3b7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e5db4af9-b5c3-46d6-9e8f-693637d5c3b7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-05920dea-23a2-4c65-ae68-cef7514b2533\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-05920dea-23a2-4c65-ae68-cef7514b2533')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-05920dea-23a2-4c65-ae68-cef7514b2533 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test_viz","summary":"{\n  \"name\": \"X_test_viz\",\n  \"rows\": 179,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0089424322106153,\n        \"min\": -2.1331269058060807,\n        \"max\": 3.167884192073125,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          -0.38274316435159567,\n          -0.23165263854628843,\n          0.44825472757759427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predicted_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":173}]},{"cell_type":"code","source":["#X_test_viz['Sex'] = X_test_viz['Sex'].map({'sex_male': 'male', 'sex_female': 'female'})\n","X_test_viz['Sex'] = X_test_viz['sex_male'].map({1: 'male', 0: 'female'})\n","# Group data by Sex and calculate survival percentage\n","gender_survival = X_test_viz.groupby('Sex')['predicted_y'].mean() * 100\n","\n","# Create the pie chart\n","plt.figure(figsize=(6, 6))\n","plt.pie(gender_survival, labels=gender_survival.index, autopct='%1.1f%%', startangle=90)\n","plt.title('Gender Survivability Percentage')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"r7eoPw1z1fem","executionInfo":{"status":"ok","timestamp":1740989590906,"user_tz":0,"elapsed":594,"user":{"displayName":"Martha Tsagli","userId":"18263609647144566999"}},"outputId":"fe5739de-96c1-4a7e-f258-65c5d4f99d8d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["What observation can you draw from the pie chart above?"],"metadata":{"id":"pBZtP3uCEi9i"}},{"cell_type":"markdown","source":["Uploaad your new test data and apply these steps to them and draw a similar pie chart as shown above"],"metadata":{"id":"Uo_AyOQvEpU_"}}]}